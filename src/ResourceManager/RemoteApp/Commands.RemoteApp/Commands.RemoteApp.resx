<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AadInfoCanNotBeAddedToCloudOnlyCollectionMessage" xml:space="preserve">
    <value>AdInfo cannot be added to a cloud-only collection</value>
  </data>
  <data name="AccountNotFoundBySubscriptionId" xml:space="preserve">
    <value>RemoteApp account not found</value>
  </data>
  <data name="ApplicationExists" xml:space="preserve">
    <value>An application with this alias already exists.</value>
  </data>
  <data name="ApplicationNotFound" xml:space="preserve">
    <value>No application with this alias exists.</value>
  </data>
  <data name="CollectionNotFoundByNameFormat" xml:space="preserve">
    <value>RemoteApp collection name: {0} not found</value>
  </data>
  <data name="FailedToGetSasUriError" xml:space="preserve">
    <value>Couldn't get Sas for template image uri.</value>
  </data>
  <data name="FailedToFindVMImage" xml:space="preserve">
    <value>Unable to find virtual machine {0}.</value>
  </data>
  <data name="TemplateNotFound" xml:space="preserve">
    <value>No templates were found in your subscription</value>
  </data>
  <data name="InvalidArgumentSubNetNameNotFoundMessageFormat" xml:space="preserve">
    <value>Invalid Argument SubnetName: {0} not found.</value>
  </data>
  <data name="InvalidOsTypeErrorFormat" xml:space="preserve">
    <value>Invalid Argument: OS Image type is {0}. It must be Windows Server.</value>
  </data>
  <data name="InvalidArgumentVNetNameNotFoundMessageFormat" xml:space="preserve">
    <value>InvalidArgument VNetName: {0} not found.</value>
  </data>
  <data name="InvalidADArguments" xml:space="preserve">
    <value>Both domain name and credentials must be specified.</value>
  </data>
  <data name="InvalidLocationArgument" xml:space="preserve">
    <value>Location must be supplied for cloud-only collections.</value>
  </data>
  <data name="LinkAzureVNetFeatureNotEnabledMessage" xml:space="preserve">
    <value>"Link Azure Vnet" Feature not enabled</value>
  </data>
  <data name="NoBillingPlansFound" xml:space="preserve">
    <value>No billing plans found for RemoteApp account</value>
  </data>
  <data name="NoLocationsFound" xml:space="preserve">
    <value>No locations found for RemoteApp account</value>
  </data>
  <data name="SessionNotFoundByUserUpnFormat" xml:space="preserve">
    <value>RemoteApp session with UserUpn: {0} not found</value>
  </data>
  <data name="UpdateCollection" xml:space="preserve">
    <value>Update Collection</value>
  </data>
  <data name="HttpStatusCodeFormat" xml:space="preserve">
    <value>"{0:T} - {1} in call to server HTTP Status: {2}"</value>
  </data>
</root>