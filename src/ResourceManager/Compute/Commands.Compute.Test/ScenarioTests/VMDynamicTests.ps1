# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

function get_all_vm_locations
{
    $locations = Get-AzureLocation | where { $_.Name -like 'Microsoft.Compute/virtualMachines' } | select -ExpandProperty Locations;

    return $locations;
}

function get_all_standard_vm_sizes
{
    param ([string] $location)

    $vmsizes = Get-AzureVMSize -Location $location | where { $_.Name -like 'Standard_A*' -and $_.NumberOfCores -le 4 } | select -ExpandProperty Name;

    return $vmsizes;
}

function get_hash_int_value
{
    # Reference: http://www.cse.yorku.ca/~oz/hash.html
    param ([string] $seedstr)

    if ($seedstr -eq $null) { $seedstr = ''; }

    [System.Int32]$hash = 5381;
    for ($i = 0; $i -lt $seedstr.Length; $i++)
    {
        [System.Int32]$c = $seedstr[$i];
        $hash = ((($hash -shl 5) + $hash) + $c) % [System.Int32]::MaxValue;
    }

    return $hash;
}

$comment_header_str =
@'
# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

# Warning: This code was generated by a tool.
# 
# Changes to this file may cause incorrect behavior and will be lost if the
# code is regenerated.

'@;

$func_get_vm_config_object =
@'

function get_vm_config_object
{
    param ([string] $rgname, [string] $vmsize)
    
    $vmname = 'vm' + $rgname;
    $p = New-AzureVMConfig -VMName $vmname -VMSize $vmsize;

    return $p;
}

'@;

$func_get_created_storage_account_name =
@'

function get_created_storage_account_name
{
    param ([string] $loc, [string] $rgname)

    $stoname = 'sto' + $rgname;
    $stotype = 'Standard_GRS';

    $st = New-AzureStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;
    $st = Get-AzureStorageAccount -ResourceGroupName $rgname -Name $stoname;

    return $stoname;
}

'@;

function func_create_and_setup_nic_ids
{
    param ([System.Int32]$random_seed)

    $fn_start =
@'

function create_and_setup_nic_ids
{
    param ([string] $loc, [string] $rgname, $vmconfig)

    $subnet = New-AzureVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";
    $vnet = New-AzureVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -DnsServer "10.1.1.1" -Subnet $subnet;
    $vnet = Get-AzureVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;
    $subnetId = $vnet.Subnets[0].Id;

'@;

    $min_num_of_nic_ids = 1;
    $max_num_of_nic_ids = 1; # TODO: Number of NICs is related to VM Size, and no API to get that information yet.
    $num_of_nic_ids = Get-Random -Minimum $min_num_of_nic_ids -Maximum (1 + $max_num_of_nic_ids) -SetSeed $random_seed;
    
    $fn_body =
@"
    `$nic_ids = @(`$null) * ${num_of_nic_ids};
"@;

    $primary_id = Get-Random -Minimum 0 -Maximum $max_num_of_nic_ids -SetSeed $random_seed;

    for ($i = 0; $i -lt $num_of_nic_ids; $i++)
    {
        $nic_var_name = '$nic' + $i;
        $nic_name_str = "('nic${i}'" + " + `$rgname)";
        $primary_switch_text = '';
        if (($num_of_nic_ids -gt 1) -and ($i -eq $primary_id))
        {
            $primary_switch_text = ' -Primary';
        }
        elseif ($num_of_nic_ids -eq 1)
        {
            $primary_switch_text = (' -Primary', ' ') | Get-Random -SetSeed $random_seed;
            $primary_switch_text = $primary_switch_text.TrimEnd();
        }

        $fn_body +=
@"

    ${nic_var_name} = New-AzureNetworkInterface -Force -Name ${nic_name_str} -ResourceGroupName `$rgname -Location `$loc -SubnetId `$subnetId;
    `$nic_ids[$i] = ${nic_var_name}.Id;
    `$vmconfig = Add-AzureVMNetworkInterface -VM `$vmconfig -Id ${nic_var_name}.Id${primary_switch_text};

"@;
    }


$fn_end =
@'

    return $nic_ids;
}
'@;

    return $fn_start + $fn_body + $fn_end;
}


$func_create_and_setup_vm_config_object =
@'

function create_and_setup_vm_config_object
{
    param ([string] $loc, [string] $rgname, [string] $vmsize)

    $vmconfig = get_vm_config_object $rgname $vmsize

    $user = "Foo12";
    $password = "BaR#123" + $rgname;
    $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;
    $cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);
    $computerName = "cn" + $rgname;
    $vmconfig = Set-AzureVMOperatingSystem -VM $vmconfig -Windows -ComputerName $computerName -Credential $cred;

    return $vmconfig;
}

'@;



$func_setup_image_and_disks =
@'

function setup_image_and_disks
{
    param ([string] $loc, [string] $rgname, [string] $stoname, $vmconfig)

    $osDiskName = 'osDisk';
    $osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";
    $osDiskCaching = 'ReadWrite';

    $vmconfig = Set-AzureVMOSDisk -VM $vmconfig -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;

    # Image Reference;
    $vmconfig.StorageProfile.SourceImage = $null;
    $imgRef = Get-DefaultCRPImage;
    $vmconfig = ($imgRef | Set-AzureVMSourceImage -VM $vmconfig);

    # Do not add any data disks
    $vmconfig.StorageProfile.DataDisks = $null;

    return $vmconfig;
}

'@;

<#
.SYNOPSIS
Run Generated VM Dynamic Tests
#>
function Run-VMDynamicTests
{
    param ([int] $num_total_generated_tests = 3, [string] $base_folder = '.\ScenarioTests\Generated')

    [bool] $isRecordMode = $true;
    $testMode = Get-ComputeTestMode;
    if ($testMode.ToLower() -eq 'playback')
    {
        $isRecordMode = $false;
    }

    $generated_file_names = @($null) * $num_total_generated_tests;
    $generated_func_names = @($null) * $num_total_generated_tests;
    $generated_rgrp_names = @($null) * $num_total_generated_tests;

    $random_sstr = Get-ComputeTestResourceName;
    $random_seed = get_hash_int_value $random_sstr;
    
    for ($i = 0; $i -lt $num_total_generated_tests; $i++)
    {
        $index = $i + 1;
        $generated_file_name = $base_folder + '\' + 'VirtualMachineDynamicTest' + $index + '.ps1';
        $generated_file_names[$i] = $generated_file_name;

        $rgname_str = Get-ComputeTestResourceName;
        $generated_rgrp_names[$i] = "'" + $rgname_str + "'";

        $generated_func_name = 'ps_vm_dynamic_test_func_' + $index + '_' + $rgname_str;
        $generated_func_names[$i] = $generated_func_name;
    }

    $locations = get_all_vm_locations;
    $locations = $locations | Get-Random -Count $locations.Count -SetSeed $random_seed;

    if ($isRecordMode -eq $true)
    {
        for ($i = 0; $i -lt $num_total_generated_tests; $i++)
        {
            $generated_file_name = $generated_file_names[$i];
            $generated_func_name = $generated_func_names[$i];

            # $st = Write-Host ('Generating Test #' + (1 + $i));
            # Generate New Dynamic Test Files
            $st = New-Item -Path $generated_file_name -Type File -Value '' -Force;
            $st = $comment_header_str | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;
            $st = $func_get_vm_config_object | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;
            $st = $func_get_created_storage_account_name | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;
            $st = (func_create_and_setup_nic_ids $random_seed) | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;
            $st = $func_create_and_setup_vm_config_object | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;

            $loc_name_str = $locations[$i % $locations.Count];
            $vm_size_str = (get_all_standard_vm_sizes $loc_name_str) | Get-Random -SetSeed $random_seed;

            $st = $func_setup_image_and_disks | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;

            $rgname_str = $generated_rgrp_names[$i];

            $fn_body =
@"

function ${generated_func_name}
{
    # Setup
    `$rgname = ${rgname_str};

    try
    {
        `$loc = '${loc_name_str}';
        `$vmsize = '${vm_size_str}';

        `$st = New-AzureResourceGroup -Location `$loc -Name `$rgname;

        `$vmconfig = create_and_setup_vm_config_object `$loc `$rgname `$vmsize;

        # Setup Storage Account
        `$stoname = get_created_storage_account_name `$loc `$rgname;

        # Setup Network Interface IDs
        `$nicids = create_and_setup_nic_ids `$loc `$rgname `$vmconfig;

        # Setup Image and Disks
        `$st = setup_image_and_disks `$loc `$rgname `$stoname `$vmconfig;

        # Virtual Machine
        `$vmname = 'vm' + `$rgname;
        `$st = New-AzureVM -ResourceGroupName `$rgname -Location `$loc -Name `$vmname -VM `$vmconfig;

        # Get VM
        `$vm1 = Get-AzureVM -Name `$vmname -ResourceGroupName `$rgname;

        # Remove
        `$st = Remove-AzureVM -Name `$vmname -ResourceGroupName `$rgname -Force;
    }
    finally
    {
        # Cleanup
        Clean-ResourceGroup `$rgname
    }
}

"@;
            $st = $fn_body | Out-File -Encoding ASCII -Append -FilePath $generated_file_name -Force;
        }
    }

    for ($i = 0; $i -lt $num_total_generated_tests; $i++)
    {
        $generated_file_name = $generated_file_names[$i];
        $st = . "$generated_file_name";
        
        $generated_func_name = $generated_func_names[$i];
        $st = Invoke-Expression -Command $generated_func_name;
    }
}